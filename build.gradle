plugins {
	id "java"
	id "maven"
	id "signing"
	id "jacoco"
	id "org.sonarqube" version "2.8"
	id "com.github.hierynomus.license" version "0.15.0"
}

group = 'com.github.wtekiela'
version = '0.3.3-SNAPSHOT'

sourceCompatibility = 1.8

license {
	include "**/*.java"
	exclude "**/*Test.java"
}

repositories {
	mavenCentral()
}

archivesBaseName = 'opensub4j'

sourceSets {
	integTest {
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

configurations {
	integTestCompile.extendsFrom testCompile
	integTestImplementation.extendsFrom testImplementation
	integTestRuntime.extendsFrom testRuntime
	integTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {

	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

	// https://mvnrepository.com/artifact/org.apache.xmlrpc/xmlrpc-client
	compile ('org.apache.xmlrpc:xmlrpc-client:3.1.3') {
		exclude group: 'junit', module: 'junit'
	}

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.6.2'

	// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
	testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

test {
	useJUnitPlatform()

	beforeTest { descriptor ->
		logger.lifecycle("Running unit test: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle(event.message)
	}
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
	}
}

task integTest(type: Test, dependsOn: classes) {
	group 'verification'
	description 'Runs integration tests.'
	testClassesDirs = sourceSets.integTest.output.classesDirs
	classpath = sourceSets.integTest.runtimeClasspath
	systemProperties['jar.path'] = jar.archiveFile.get().asFile.path

	useJUnitPlatform()

	beforeTest { descriptor ->
		logger.lifecycle("Running integration test: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle(event.message)
	}
}

check.dependsOn integTest

task jacocoIntegTestReport(type: JacocoReport, dependsOn: integTest) {
	group 'verification'
	description 'Generates code coverage report for the integTest task.'
	executionData integTest
	sourceSets sourceSets.main
	reports {
		xml {
			enabled = true
			destination = file("build/reports/jacoco/integTest/jacocoIntegTestReport.xml")
		}
		html {
			enabled true
			destination = file("build/reports/jacoco/integTest/html")
		}
	}
}

integTest.finalizedBy jacocoIntegTestReport

task jacocoReport(type: JacocoReport) {
	group 'verification'
	description 'Generates code coverage report for all test tasks.'
	executionData test
	executionData integTest
	sourceSets sourceSets.main
	reports {
		xml {
			enabled = true
			destination = file("build/reports/jacoco/all/jacocoReport.xml")
		}
		html {
			enabled true
			destination = file("build/reports/jacoco/all/html")
		}
	}
}

check.finalizedBy jacocoReport

jar {
	manifest {
		attributes(
				"Specification-Title": "OpenSubtitles API for Java",
				"Specification-Version": version,
				"Specification-Vendor": "Wojciech Tekiela",
				"Implementation-Title": "OpenSub4J",
				"Implementation-Version": version,
				"Implementation-Vendor": "Wojciech Tekiela"
		)
	}
}

task javadocJar(type: Jar) {
	group 'build'
	archiveClassifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	group 'build'
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

sonarqube {
	properties {
		property "sonar.projectKey", "wtekiela_opensub4j"
		property "sonar.organization", "wtekiela"

		properties["sonar.tests"] += sourceSets.integTest.allSource.srcDirs
		properties["sonar.junit.reportPaths"] += integTest.reports.junitXml.destination
	}
}

signing {
	sign configurations.archives
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.project {
				name 'OpenSub4J'
				packaging 'jar'
				description 'Java library providing an object-oriented abstraction ' +
						'over XML-RPC opensubtitles.org API.'
				url 'https://github.com/wtekiela/opensub4j'

				scm {
					connection 'scm:git:git@github.com/wtekiela/opensub4j.git'
					developerConnection 'scm:git:git@github.com/wtekiela/opensub4j.git'
					url 'git@github.com/wtekiela/opensub4j.git'
				}

				licenses {
					license {
						name 'The Apache License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						name 'Wojciech Tekiela'
						email 'wojciech@tekiela.pl'
					}
				}
			}
		}
	}
}
